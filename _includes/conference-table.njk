<style>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 8px;
  border: 1px solid #ddd;
}

th {
  background: #333;
  color: #fff;
}
.mini-calendar-td {
  padding: 0px;
}

.mini-calendar {
  display: flex;
  align-items: center;
  text-align: center;
  padding: 8px;
}
.months {
  font-size: 13px;
}
.days {
  font-weight: bold;
  font-size: 17px;
}
.main-date {
  flex: 1;
  margin-right: auto;
  white-space: nowrap;
}
.year {
  display: none;
  position: absolute;
  color: #fff;
  background: #333;
  border: 1px solid #ddd;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

#continent-filters {
  margin-bottom: 15px;
}

.filter-group .button {
  margin: 10px;
}

@media only screen and (min-width: 601px) {
    .only-mobile {
      display: none;
    }

  tr:hover {
    background: #333 !important;
    color: #fff;
  }

  tr:nth-child(even) {
    background: #f2f2f2;
  }
}

@media only screen and (max-width: 600px) {
    .only-desktop {
      display: none;
    }

    /* For mobile devices, stack headers and data vertically */
    table thead {
      display: none;
    }

    table tbody tr {
      display: block;
      margin-top: 4px;
      margin-bottom: 4px;
      border: 1px #333 solid;
      background: #f2f2f2;
    }

    table tbody tr td:not(:first-child) {
      display: none;
    }

    table tbody td {
      display: block;
      position: relative;
      text-align: right;
      border: none;
      font-size: 14px;
    }

    tr td:nth-child(even) {
      background: #fff;
    }

    table tbody td::before {
      content: attr(data-label);
      font-weight: bold;
      display: block;
      position: absolute;
    }

    tr td:first-child {
      font-weight: bold;
      background: #333;
      font-size: 16px;
      color: #fe904d;
    }

    tr td:nth-child(2){
      display: none !important;
    }

    .show-table-body {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .show-table-body td {
        display: block !important;
    }

    .button-wrapper {
        display: flex;
        justify-content: space-between;
    }
}
</style>

<h4>Languages</h4>
<div id="lang-filters" class="filter-group"></div>
<h4>Continents</h4>
<div id="continent-filters" class="filter-group"></div>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Date</th>
      <th>City</th>
      <th>Country</th>
      <th>Topic</th>
      <th>Language</th>
    </tr>
  </thead>
  <tbody id="eventTableBody">
    <!-- Rows will be dynamically added here -->
  </tbody>
</table>

<script>
  const langFiltersDiv = document.querySelector('#lang-filters');
  const continentFiltersDiv = document.querySelector('#continent-filters');
  const tbody = document.getElementById("eventTableBody");

  const eventsData = {% dumpConferenceData %};

  const continents = [...new Set(eventsData.map(event => event.continent))];
  let continentFilter = continents.sort().map(continent => ({
    name: continent,
    show: false
  }));

  const [userLang] = (navigator.language || navigator.userLanguage).split('-');
  const languages = [...new Set(eventsData.map(event => event.language))];
  let langFilter = languages
  .sort()
  .map(lang => ({
    iso639: lang,
    show: lang === userLang || lang === "en"
  }));

  langFilter.forEach(lang => {
      const button = document.createElement('div');
      if(lang.show) {
        button.classList.add('button', 'button-dark');
      } else {
        button.classList.add('button', 'button-white-with-border');
      }
      button.textContent = lang.iso639;
      langFiltersDiv.appendChild(button);

      button.addEventListener('click', () => {
          langFilter.forEach(lf => {
            if (lang.iso639 === lf.iso639) {
                if (lf.show === true) {
                  lf.show = false;
                  button.classList.add('button-white-with-border');
                  button.classList.remove('button-dark');
                } else {
                  lf.show = true;
                  button.classList.add('button-dark');
                  button.classList.remove('button-white-with-border');
                }
            }
          });

        const langButtons = document.querySelectorAll("#lang-filters > .button");
        if (langFilter.every(lang => lang.show === false)) {
          langButtons.forEach(filterButton => {
            filterButton.classList.add('filter-disabled');
          });
        } else {
          langButtons.forEach(filterButton => {
            filterButton.classList.remove('filter-disabled');
          });
        }

        createTable();
      });
    });

  continents.forEach(continent => {
    const button = document.createElement('div');
    button.classList.add('button', 'button-white-with-border', 'filter-disabled');
    button.textContent = continent;
    continentFiltersDiv.appendChild(button);

    button.addEventListener('click', () => {
        continentFilter.forEach(cf => {
          if (continent === cf.name) {
              if (cf.show === true) {
                cf.show = false;
                button.classList.add('button-white-with-border');
                button.classList.remove('button-dark');
              } else {
                cf.show = true;
                button.classList.add('button-dark');
                button.classList.remove('button-white-with-border');
              }
          }
        });

      const continentButtons = document.querySelectorAll("#continent-filters > .button");
      if (continentFilter.every(continent => continent.show === false)) {
        continentButtons.forEach(filterButton => {
          filterButton.classList.add('filter-disabled');
        });
      } else {
        continentButtons.forEach(filterButton => {
          filterButton.classList.remove('filter-disabled');
        });
      }

      createTable();
    });
  });

  createTable();

  document.addEventListener("DOMContentLoaded", function() {
    var tds = document.querySelectorAll(".mini-calendar");

    tds.forEach(function(td) {
      var year = td.querySelector(".year");

      td.addEventListener("mouseenter", function() {
        year.style.display = "block";
      });

      td.addEventListener("mouseleave", function() {
        year.style.display = "none";
      });
    });
  });

  function createTable() {
    const activeLanguages = langFilter.filter(continent => continent.show);
    const activeContinents = continentFilter.filter(continent => continent.show);

    events = eventsData
               .filter(event => activeLanguages.length === 0 || activeLanguages.some(lang => lang.iso639 === event.language))
               .filter(event => activeContinents.length === 0 || activeContinents.some(continent => continent.name === event.continent))
               .sort((a, b) => new Date(a.fromDate) - new Date(b.fromDate));

    drawTable(events);
  }

  function drawTable(events) {
    tbody.innerHTML = "";

    for (var i = 0; i < events.length; i++) {
      var row = tbody.insertRow();
      row.addEventListener('click', (event) => {
         event.currentTarget.classList.toggle("show-table-body");
      });

      var titleCell = row.insertCell();
      var titleLink = document.createElement("a");
      titleLink.classList.add("only-desktop");
      titleLink.href = events[i].website;
      titleLink.textContent = events[i].title;
      titleCell.appendChild(titleLink);

      var titleText = document.createElement("span");
      titleText.classList.add("only-mobile");
      titleText.textContent = events[i].title;
      titleCell.appendChild(titleText);

      titleCell.setAttribute('data-label', textifyDate(new Date(events[i].fromDate), new Date(events[i].toDate)));

      var dateCell = row.insertCell();
      dateCell.classList.add("mini-calendar-td");
      dateCell.innerHTML = formatDate(new Date(events[i].fromDate), new Date(events[i].toDate));

      var cityCell = row.insertCell();

      var cityLink = document.createElement("a");
      cityLink.classList.add("only-desktop");
      cityLink.href = events[i].gmaps;

      var cityText = document.createElement("span");
      cityText.textContent = events[i].city;

      var cityText2 = cityText.cloneNode(true);
      cityText2.classList.add("only-mobile");

      cityLink.appendChild(cityText);
      cityCell.appendChild(cityLink);
      cityCell.appendChild(cityText2);
      cityCell.setAttribute('data-label', 'City');

      var countryCell = row.insertCell();
      countryCell.textContent = events[i].country;
      countryCell.setAttribute('data-label', 'Country');

      var topicCell = row.insertCell();
      topicCell.textContent = events[i].topic;
      topicCell.setAttribute('data-label', 'Topic');

      var languageCell = row.insertCell();
      languageCell.textContent = events[i].language;
      languageCell.setAttribute('data-label', 'Language');

      var linksCell = row.insertCell();
      linksCell.classList.add("only-mobile");

      var buttonWrapper = document.createElement("div");
      buttonWrapper.classList.add("button-wrapper");

      var gmapsButtonLink = document.createElement("a");
      var gmapsButton = document.createElement("div");
      gmapsButton.classList.add("button", "button-dark");
      gmapsButton.textContent = "Google Maps";
      gmapsButtonLink.href = events[i].gmaps;
      gmapsButtonLink.appendChild(gmapsButton);

      var websiteButtonLink = document.createElement("a");
      var websiteButton = document.createElement("div");
      websiteButton.classList.add("button", "button-dark");
      websiteButton.textContent = "Website";
      websiteButtonLink.href = events[i].website;
      websiteButtonLink.appendChild(websiteButton);

      buttonWrapper.appendChild(gmapsButtonLink);
      buttonWrapper.appendChild(websiteButtonLink);
      linksCell.appendChild(buttonWrapper);
    }
  }

  function formatDate(start, end) {
    const years = yearsConcat(start, end);
    const months = monthsConcat(start, end);
    const days = daysConcat(start, end);

    return `
        <div class="mini-calendar">
           <div class="main-date">
	     <div class="months">${months}</div>
             <div class="days">${days}</div>
             <div class="year">${years}</div>
	   </div>
	</div>
    `;
  }

  function textifyDate(start, end) {
    const startMonth = start.toLocaleString('default', { month: 'short' });
    const endMonth = end.toLocaleString('default', { month: 'short' });

    if(startMonth === endMonth) {
	return `${startMonth} ${daysConcat(start, end)}`;
    }

    return `${startMonth} ${start.getDate()} - ${endMonth} ${end.getDate()}`;
  }

  function daysConcat(start, end) {
    const startDay = start.getDate();
    const endDay = end.getDate();

    return startDay === endDay ? startDay : `${startDay} - ${endDay}`;
  }

  function monthsConcat(start, end) {
    const startMonth = start.toLocaleString('default', { month: 'short' });
    const endMonth = end.toLocaleString('default', { month: 'short' });

    return startMonth === endMonth ? startMonth : `${startMonth} - ${endMonth}`;
  }
  
  function yearsConcat(start, end) {
    const startYear = start.getFullYear();
    const endYear = end.getFullYear();

    return startYear === endYear ? startYear : `${startYear} - ${endYear}`;
  }
</script>
