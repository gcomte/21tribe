<style>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 8px;
  border: 1px solid #ddd;
}

th {
  background: #333;
  color: #fff;
}
.mini-calendar-td {
  padding: 0px;
}

.mini-calendar {
  display: flex;
  align-items: center;
  text-align: center;
  padding: 8px;
}
.months {
  font-size: 13px;
}
.days {
  font-weight: bold;
  font-size: 17px;
}
.main-date {
  flex: 1;
  margin-right: auto;
  white-space: nowrap;
}
.year {
  display: none;
  position: absolute;
  color: #fff;
  background: #333;
  border: 1px solid #ddd;
  padding: 10px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

@media only screen and (min-width: 601px) {
  tr:hover {
    background: #333 !important;
    color: #fff;
  }

  tr:nth-child(even) {
    background: #f2f2f2;
  }
}

@media only screen and (max-width: 600px) {
    /* For mobile devices, stack headers and data vertically */
    table thead {
      display: none;
    }

    table tbody tr {
      display: block;
      margin-bottom: 28px;
      border: 1px #333 solid;
      background: #f2f2f2;
    }

    table tbody td {
      display: block;
      position: relative;
      text-align: right;
      border: none;
      font-size: 14px;
    }

    tr td:nth-child(even) {
      background: #fff;
    }

    table tbody td::before {
      content: attr(data-label);
      font-weight: bold;
      display: block;
      position: absolute;
      left: 5;
      //top: 0;
    }

    tr td:first-child {
      background: #333;
      font-size: 16px;
      color: #fff;
    }

    tr td:nth-child(2){
      display: none;
    }
  }
</style>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Date</th>
      <th>City</th>
      <th>Country</th>
      <th>Topic</th>
      <th>Language</th>
    </tr>
  </thead>
  <tbody id="eventTableBody">
    <!-- Rows will be dynamically added here -->
  </tbody>
</table>

<script>
  const eventsData = {% dumpConferenceData %};
  const continents = [...new Set(eventsData.map(event => event.continent))];

  function sortByFromDateAsc(events) {
    return events.sort((a, b) => new Date(a.fromDate) - new Date(b.fromDate));
  }

  var events = sortByFromDateAsc(eventsData);

  function createTable() {
    var tbody = document.getElementById("eventTableBody");

    for (var i = 0; i < events.length; i++) {
      var row = tbody.insertRow();

      var titleCell = row.insertCell();
      var titleLink = document.createElement("a");
      titleLink.href = events[i].website;
      titleLink.textContent = events[i].title;
      titleCell.appendChild(titleLink);
      titleCell.setAttribute('data-label', textifyDate(new Date(events[i].fromDate), new Date(events[i].toDate)));

      var dateCell = row.insertCell();
      dateCell.classList.add("mini-calendar-td");
      dateCell.innerHTML = formatDate(new Date(events[i].fromDate), new Date(events[i].toDate));

      var cityCell = row.insertCell();
      var cityLink = document.createElement("a");
      cityLink.href = events[i].gmaps;
      cityLink.textContent = events[i].city;
      cityCell.appendChild(cityLink);
      cityCell.setAttribute('data-label', 'City');

      var countryCell = row.insertCell();
      countryCell.textContent = events[i].country;
      countryCell.setAttribute('data-label', 'Country');

      var topicCell = row.insertCell();
      topicCell.textContent = events[i].topic;
      topicCell.setAttribute('data-label', 'Topic');

      var languageCell = row.insertCell();
      languageCell.textContent = events[i].language;
      languageCell.setAttribute('data-label', 'Language');
    }
  }

  function formatDate(start, end) {
    const years = yearsConcat(start, end);
    const months = monthsConcat(start, end);
    const days = daysConcat(start, end);

    return `
        <div class="mini-calendar">
           <div class="main-date">
	     <div class="months">${months}</div>
             <div class="days">${days}</div>
             <div class="year">${years}</div>
	   </div>
	</div>
    `;
  }

  function textifyDate(start, end) {
    const startMonth = start.toLocaleString('default', { month: 'short' });
    const endMonth = end.toLocaleString('default', { month: 'short' });

    if(startMonth === endMonth) {
	return `${startMonth} ${daysConcat(start, end)}`;
    }

    return `${startMonth} ${start.getDate()} - ${endMonth} ${end.getDate()}`;
  }

  function daysConcat(start, end) {
    const startDay = start.getDate();
    const endDay = end.getDate();

    return startDay === endDay ? startDay : `${startDay} - ${endDay}`;
  }

  function monthsConcat(start, end) {
    const startMonth = start.toLocaleString('default', { month: 'short' });
    const endMonth = end.toLocaleString('default', { month: 'short' });

    return startMonth === endMonth ? startMonth : `${startMonth} - ${endMonth}`;
  }
  
  function yearsConcat(start, end) {
    const startYear = start.getFullYear();
    const endYear = end.getFullYear();

    return startYear === endYear ? startYear : `${startYear} - ${endYear}`;
  }

  createTable();

  document.addEventListener("DOMContentLoaded", function() {
  var tds = document.querySelectorAll(".mini-calendar");

  tds.forEach(function(td) {
    var year = td.querySelector(".year");

    td.addEventListener("mouseenter", function() {
      year.style.display = "block";
    });

    td.addEventListener("mouseleave", function() {
      year.style.display = "none";
    });
  });
});

</script>

